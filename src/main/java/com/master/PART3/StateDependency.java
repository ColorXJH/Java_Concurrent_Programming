package com.master.PART3;

/**
 * @author ColorXJH
 * @version 1.0
 * @description: 状态依赖
 * @date 2024-04-08 17:10
 */
public class StateDependency {
}
//执行任何操作通常有两个必要条件
    //1：外部条件：对象收到了执行操作的请求
    //2：内部条件：对象处于可进行操作的状态
//独占技术主要关注于维持不变约束，而状态依赖的并发控制 更加关注前提条件和结果条件
    //具体来说：当客户调用主体对象的方法时，这个操作不一定有基于状体的前提条件，
    //或者说其以来的对象导致其不能满足自身的结束条件
//大多数有状态依赖操作的类的设计问题都要考虑如下因素：如何顾及到所有的可能出现的消息以及状态的组合，从而使得设计具有完整性
//在一个理想的系统中，所有方法都不应有基于状态的前提条件，并且总是能够满足结束条件
    //但是很多行为的本质就是依赖状态的，并且无法被编写成在所有状态下都满足结束条件
//基于活跃性优先和安全性优先的角度，
    //1：乐观的"先试再看"--》调用者需要处理调用失败的情况
        //乐观法依赖于异常机制以及当结果条件无法满足时的相关提示机制的存在
    //2：保守的”先测再做“
        //保守法依赖于那些提供保障的构建，这些构建能够在操作所需的前提条件满足时发出提示
package com.master.PART3;

/**
 * @ClassName: TransactionHandle
 * @Package: com.master.PART3
 * @Description: 事务处理
 * @Datetime: 2024/5/19 10:34
 * @author: ColorXJH
 */
public class TransactionHandle {
    //事务处理：在并发OO编程中，事务是指某客户对象在任意一组参与对象上，通过调用一系列方法执行的某个操作，它不会受到其他外界的干扰
    //事务处理协议：before/after的一种扩展：参与、提交=》对比获得、释放锁的区别：参与提交需要所有的参与对象都达成一致，所有参与者都必须同意开始或者结束事务
        //如下：
            //1:对于每个参与者p,如果p不能参与，那么中止。
            //2:对于每个参与者p,实验性的执行p的操作
            //3:对于每个参与者p,如果p无法提交，则终止
            //4:对于每个参与者p,提交p在这个事务中所产生的结果
        //在大多数并发控制的上下文中，有两个补充策略可以用于这个协议，乐观事务处理：参与者总是可以参与，但是并不是总是可以提交，保守的事务处理：参与者并不是总是可以参与
        //而一旦他们参与了就一定能够提交，当竞争的可能性低到足以忽略回滚所带来的开销时，乐观法最适用，当很难或者无法撤销事务中所执行的操作时，保守法就最适用，也可以结合乐观法和保守法一起使用
    //事务参与者
        
}

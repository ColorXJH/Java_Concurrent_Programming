package com.master.PART2;

/**
 * @author ColorXJH
 * @version 1.0
 * @description: 链表数据结构
 * @date 2024-04-02 17:22
 */
public class LinkedDataStructure {
}

//作为链表数据结构入口点的对象，类分解策略可以通过下面的方法使得对该对象的访问竞争达到最小：
    //在入口类的完全同步化（会限制并发数量）
    //链表中所有节点完全同步化（这种方式效率低，会有活跃性问题）
        //折中的方法：所有锁分解技术的主要目的都是把不同的锁和不同的方法联系起来，但是在链表数据结构中
        //通常会导致对数据结构和算法本身的进一步调整，下面的类有一些通用的技巧
            //LinkedQueue可以作为普通的无界先进先出的队列FIFO,他对put和poll操作分别维持同步，putLock的锁保证一个时候只能进行一个put操作
                //pollLock保证一个时刻只能poll一个元素，在这种应用中通常有一个头节点，使得put和poll可以独立进行
                //每一个poll之后，以前的第一个节点变成了新的头节点，put、poll同时对一个空队列或者即将为空的队列操作时，对于被访问的节点本身
                //需要加锁防止冲突，因为在这种情况下，head/last指向同一个头节点
                    //LinkedQueue    a（头节点）--》第一个节点--》下一个节点--》。。。。。  头节点poll,尾节点put